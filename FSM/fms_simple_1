// Note the Verilog-1995 module declaration syntax here:
module top_module(clk, reset, in, out);
    input clk;
    input reset;    // Synchronous reset to state B
    input in;
    output out;//  
    reg out;

    // Fill in state name declarations
    parameter A=1'b0, B=1'b1; 
    

    reg present_state, next_state;

    always @(posedge clk) begin
        if (reset==1) 
            begin  
                // Fill in reset logic
                present_state <= B;
                out <= 1'b1;
            end 
        else 
                    begin
                        case (present_state)
                            A:
                                begin
                                    if (in == 0)
                                    begin
                                        present_state <= B;
                                        out <= 1'b1;
                                        // next_state <= A;

                                    end
                                    else   // in == 1
                                    begin
                                        present_state <= present_state;
                                        out <= 1'b0;
                                    end

                                end

                            B:
                                begin
                                    if (in == 0)
                                    begin
                                        present_state <= A;
                                        out <= 1'b0;
                                        // next_state <= A;

                                    end
                                    else  // in == 1
                                    begin
                                        present_state <= present_state;
                                        out <= 1'b1;
                                    end

                                end
                            default:
                                begin
                                        present_state <= A;
                                        out <= 1'b0;
                                end


                        endcase

                        // State flip-flops
                        // present_state <= next_state;   

                        
                        /*
                        case (present_state)
                            // Fill in output logic
                            A:
                                
                            B: 
                                out <= 1'b1;
                            default:
                                out <= 1'b0;

                        endcase
                        */
                    end
    end

endmodule
