module top_module(
    input clk,
    input areset,    // Asynchronous reset to state B
    input in,
    output out);//  

    parameter A=0, B=1; 
    reg state, next_state;

    
    
    /*
    always @(*) begin    // This is a combinational always block
        // State transition logic
        if (state)
    end
    */

    always @(posedge clk or posedge areset) begin    // This is a sequential always block
        // State flip-flops with asynchronous reset
        if (areset==1'b1)
            begin
            state <= B;
            next_state <= B;
            end
        else if (state == A)
        begin
            if (in == 1)
                begin
                    next_state <= A;    
                    state <= A;
                end
        	else // in == 0
                begin
                    next_state <= B;    
                    state <= B;
                end
        end
        else if (state == B)
        begin
            if (in == 1)
                begin
                    next_state <= B;    
                    state <= B;
                end
        	else // in == 0
                begin
                    next_state <= A;    
                    state <= A;
                end
        end
         else
             begin
                     state<= state;
                     next_state <= next_state;
    		 end
        
    end

    // Output logic
    // assign out = (state == ...);
    assign out = (state == A)?0:1;    
        

endmodule
