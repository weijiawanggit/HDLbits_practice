module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output [23:0] out_bytes,
    output done); 

    // State transition logic (combinational)

    // State flip-flops (sequential)
     // State flip-flops with synchronous reset

    // Output logic
    
    // state delaration
    parameter S0=4'b0001, S1=4'b0010, S2=4'b0100, S3=4'b1000;
    
    reg [3:0] present_state;
    reg done_reg;
    
    reg [7:0] data0;
    reg [7:0] data1;
    reg [7:0] data2;
    
    always @(posedge clk) 
        begin
        if (reset==1) 
            begin  
                // Fill in reset logic
                present_state <= S0;
                done_reg <= 1'b0;
            end 
        else 
                    begin
                        case (present_state)
                            S0:
                                begin
                                    if (in[3] == 1)
                                    begin
                                        present_state <= S2;
                                        done_reg <= 1'b0;
                                        data0 <= in;
                                    end
                                    else   
                                    begin
                                        present_state <= S0;
                                        done_reg <= 1'b0;
                                    end

                                end

                            S2:
                                 begin
                                        present_state <= S3;
                                        data1 <= in;
                                    	  done_reg <= 1'b0;
                                 end
                            S3:
                                begin
                                        present_state <= S0;
                                        data2 <= in;
                                    	  done_reg <= 1'b1;
								end
                          
                            default:
                                begin
                                        present_state <= S0;
                                        done_reg <= 1'b0;
                                end

                        endcase
                    end
        end
    
    
      // Output logic
      assign done = done_reg;
      assign out_bytes = {data0, data1, data2};
 


endmodule
