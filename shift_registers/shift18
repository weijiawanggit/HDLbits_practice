module top_module(
    input clk,
    input load,
    input ena,
    input [1:0] amount,
    input [63:0] data,
    output reg [63:0] q); 


    
    
    always@(posedge clk)
    begin

        if (load == 1)
        begin
            q <= data;
            // q_temp <= data;
            // q_0 <= data[0];
            // q_99 <= data[99];
        end
        else if (ena == 1)
        begin
            if (amount==2'b00)  // shift left by 1 bit.
                    begin
                        q <= {q[62:0], 1'b0};
                        // q[99] <= q_0;
                        //q_0 <= q[0];
                        //q_99 <= q[99];
                    end
            else if (amount==2'b01)  // shift left by 8 bits.
                    begin
                        q <= {q[55:0], 8'b0};
                        //q[0] <= q_99;
                        //q_0 <= q[0];
                        //q_99 <= q[99];

                    end
            else if ((amount==2'b10))   // 2'b10: shift right by 1 bit.
                    begin
                        q <= {q[63], q[63:1]};
                        // q_0 <= q[0];
                        // q_99 <= q[99];
                    end

            else  // |(ena==2'b11)  // // 2'b10: shift right by 8 bit.
                begin
                    q <= {{8{q[63]}}, q[63:8]};
                    // q_0 <= q[0];
                    // q_99 <= q[99];
                end
        end
        else
            begin
					q <= q;
            end
            

    end
    
    
    
    
    
    


    
    
endmodule
