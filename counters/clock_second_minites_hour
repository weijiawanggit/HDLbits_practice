`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2021/02/08 19:52:11
// Design Name: 
// Module Name: clock_bcd
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////
module clock_bcd3(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

parameter TCQ = 1'b1; 
    
reg [3:0] cnt_clk;
wire en_cnt_clk;
reg end_cnt_clk;


reg [7:0] ss_reg;
wire en_ss_low;
reg end_ss_low;
      
reg [3:0] cnt_tens;
wire en_cnt_tens;
reg end_cnt_tens;    



reg [7:0] mm_reg;
reg [3:0] cnt_mm_low;
wire en_cnt_mm_low;
reg en_cnt_mm_low_reg;
reg end_cnt_mm_low;   

reg [3:0] cnt_mm_high;
wire en_cnt_mm_high;
reg end_cnt_mm_high;
reg en_cnt_mm_high_reg;

reg [7:0] hh_reg;
reg [3:0] cnt_hh_low;
wire en_cnt_hh_low;
reg en_cnt_hh_low_reg;
reg end_cnt_hh_low;   

reg [3:0] cnt_hh_high;
wire en_cnt_hh_high;
reg end_cnt_hh_high;
reg en_cnt_hh_high_reg;

reg end_cnt_hh_low_condition1;
reg end_cnt_hh_low_condition2;
    
reg [3:0] cnt_thou;
wire en_cnt_thou;
reg end_cnt_thou;     
    
reg pm_reg ;   
    
    
// assign en_cnt_clk = ena;  // always enable the first counter
//count on each clock
always@(posedge clk)
begin
    if(reset==1)        
        ss_reg[3:0] <= #TCQ 4'd0;
        
    else if (ena==1) 
        if (ss_reg < 8'h59)
        begin   
            // if(end_cnt_clk)     //end counter condition
            if((ss_reg[3:0] == 4'h9))
                ss_reg[3:0] <= #TCQ 4'd0;
            else
                ss_reg[3:0] <= #TCQ ss_reg[3:0] + 1'd1;
         end
         else    // ss_reg == 59
         begin
            ss_reg[3:0] <= #TCQ 4'd0;
         end
       else
       begin
       end
     
            //cnt_clk <= #TCQ cnt_clk;  // keep the same 
end

//end count flag circuit



//always@(posedge clk)
//begin
//    if(reset)
//    begin
//            end_cnt_clk <= #TCQ 1'b0;
//    end
//    else // if(ena==1)
//        begin
//            if ((cnt_clk == 4'd9-1))
//                    end_cnt_clk <= #TCQ 1'b1;
                    
//            else
//                    end_cnt_clk <= #TCQ 1'b0;
//        end
//    //else
//          //end_cnt_clk <= #TCQ 1'b0;
//end
/*
always@(posedge clk)
begin
    if(reset)
    begin
            end_cnt_clk <= #TCQ 1'b0;
    end
    else if ((cnt_clk == 4'd9-1))
            end_cnt_clk <= #TCQ 1'b1;
    		
    else
            end_cnt_clk <= #TCQ 1'b0;
end
*/

// assign ss[3:0] =  ss_reg[3:0];
    
// assign en_cnt_tens = end_cnt_clk;

// count on each 10 clock   
always@(posedge clk)
begin
    if(reset==1)        
         ss_reg[7:4] <= #TCQ 4'd0;
    if (ena == 1)
    begin
            if (ss[3:0]==4'd9)
            // if(ss_reg[7:4]==5 )     //end counter condition
                // ss_reg[7:4] <= #TCQ 4'd0;
            // else if (end_cnt_clk)
//            if ((ss_reg[7:4]==4'd5)&(ss_reg[3:0]==4'd9))
//                ss_reg[7:4] <= #TCQ 0;
            // if ((ss_reg[7:4]==4'd5)&(ss_reg[3:0]==4'd9))
                begin
                        if ((ss_reg==8'h59))
                            ss_reg[7:4] <= #TCQ 0;
                            
                        else if (ss_reg[7:4]<4'd5)
                            ss_reg[7:4] <= #TCQ ss_reg[7:4] + 1'b1;
                        else
                            ss_reg[7:4] <=    ss_reg[7:4];
                end
             else
             begin
             end
             
    end
    else
    begin
    end
        // ss_reg[7:4] <= #TCQ ss_reg[7:4];  // keep the same 
end

//end count flag circuit
//always@(posedge clk)
//begin
//    if(reset)
//    begin
//            end_cnt_tens <= #TCQ 1'b0;
//            en_cnt_mm_low_reg <= 0;
//    end
//    else if(ena==1)
//    begin        
            
//            if ((cnt_tens == 4'd5)&(cnt_clk == 4'd9-1))
//            begin
//                    end_cnt_tens <= #TCQ 1'b1;
//                    en_cnt_mm_low_reg <= 1;
//            end
//            //else if ((cnt_tens == 4'd5)&(cnt_clk == 4'd9-2))
//            //begin
//                    //end_cnt_tens <= #TCQ 1'b0;
//                   // en_cnt_mm_low_reg <= #TCQ 1'b1;
//            //end
//            else
//            begin
//                    end_cnt_tens <= #TCQ 1'b0;
//                    en_cnt_mm_low_reg <= #TCQ 1'b0;
//            end
//     end
//     else
//     begin
//     end
//end
    
// assign ena[2] =  end_cnt_tens;
// assign ss[7:4] = ss_reg[7:4];
assign ss = ss_reg;



/*********   the minites   **********/
//  only counts when the seconds are full
//  assign en_cnt_mm_low = en_cnt_mm_low_reg;

always@(posedge clk)
begin
    if(reset)        
        mm_reg[3:0] <= #TCQ 4'd0;
    // end_cnt_hh_low|end_cnt_hh_high
    else if (ena==1)
        if(ss_reg == 8'h59)
        begin
            if(mm_reg[3:0] ==4'd9)     //end counter condition
                mm_reg[3:0]  <= #TCQ 4'd0;
            else
                mm_reg[3:0]  <= #TCQ mm_reg[3:0]  + 1'b1;
         end
         else
         begin
         end
    else
    begin
    end
end

//end count flag circuit
/*
always@(posedge clk)
begin
    if(reset)
    begin
            end_cnt_mm_low <= #TCQ 1'b0;
    end
    else if ((cnt_mm_low == 4'd10-1)& (ss_reg == 8'h59))
            end_cnt_mm_low <= #TCQ 1'b1;
    		
    else
            end_cnt_mm_low <= #TCQ 1'b0;
end
*/

assign mm[3:0] =  mm_reg[3:0];


always@(posedge clk)
begin
    if(reset)        
         mm_reg[7:4] <= #TCQ 4'd0;
    else if (ena == 1)
    begin
            if(ss_reg == 8'h59)
            begin
                    // if(ss_reg[7:4]==5 )     //end counter condition
                        // ss_reg[7:4] <= #TCQ 4'd0;
                    // else if (end_cnt_clk)
                    if ((mm_reg[7:4]==4'd5)&(mm_reg[3:0]==4'd9))
                        mm_reg[7:4] <= #TCQ 0;
                        
                    else if ((mm[3:0]==4'd9)&((mm_reg[7:4]<4'd5)))
                        mm_reg[7:4] <= #TCQ mm_reg[7:4] + 1'b1;
                    else
                        mm_reg[7:4] <=    mm_reg[7:4];
             end
             else
             begin
             end
             
    end
    else
    begin
    end      // keep the same 
end
// assign en_cnt_mm_high =  end_cnt_mm_low;  

// the higher part of the minites 
/*
always@(posedge clk)
begin
    if(reset)        
        cnt_mm_high <= #TCQ 4'b0;
    else if(end_cnt_mm_high)     //end counter condition
        cnt_mm_high <= #TCQ 4'b0;
    else if (en_cnt_mm_high & ena)
        cnt_mm_high <= #TCQ cnt_mm_high + 1'b1;

    else
        cnt_mm_high <= #TCQ cnt_mm_high;  // keep the same 
end
*/


/*
always@(posedge clk)
begin
    if(reset)        
        mm_reg[7:4] <= #TCQ 4'd0;
    // end_cnt_hh_low|end_cnt_hh_high
    else if (ena==1)
        if((ss_reg == 8'h59) & (mm_reg[3:0]==4'd9))
        begin
            if(mm_reg[7:4] ==4'd9)     //end counter condition
                mm_reg[7:4]  <= #TCQ 4'd0;
            else
                mm_reg[7:4]  <= #TCQ mm_reg[7:4]  + 1'b1;
         end
         else
         begin
         end
    else
    begin
    end
end
*/




//end count flag circuit
/*
always@(posedge clk)
begin
    if(reset)
    begin
            end_cnt_mm_high <= #TCQ 1'b0;
            en_cnt_hh_low_reg <= 0;
    end
    else if ((cnt_mm_high == 4'd5)&(cnt_mm_low == 4'd10-1)& (cnt_tens == 4'd5)& (cnt_clk == 4'd9-1))
    begin
            end_cnt_mm_high <= #TCQ 1'b1;
            en_cnt_hh_low_reg <= 1;
    end
    else
    begin
            end_cnt_mm_high <= #TCQ 1'b0;
            en_cnt_hh_low_reg <= 0;
    end
end
*/

assign mm[7:4] =  mm_reg[7:4];


/**********************************/
/*********   the hours   **********/
always@(posedge clk)
begin
    if(reset)
    begin        
        hh_reg[3:0] <= #TCQ 4'd2;
        pm_reg <= 0;
    end
    // end_cnt_hh_low|end_cnt_hh_high
    else if (ena==1)
        if((mm_reg == 8'h59)&(ss_reg == 8'h59))
        begin
            if ((hh_reg[7:4]==4'd1)&(hh_reg[3:0]==4'd2))
                hh_reg[3:0]  <= #TCQ 4'd1;
            else if ((hh_reg[7:4]==4'd1)&(hh_reg[3:0]==4'd1))
            begin
                pm_reg  <= #TCQ ~pm_reg;
                hh_reg[3:0]  <= #TCQ hh_reg[3:0]  + 1'b1;
            end
            else if(hh_reg[3:0] ==4'd9)     //end counter condition
                hh_reg[3:0]  <= #TCQ 4'd0;
            else
                hh_reg[3:0]  <= #TCQ hh_reg[3:0]  + 1'b1;
         end
         else
         begin
         end
    else
    begin
    end
end



always@(posedge clk)
begin
    if(reset)        
         hh_reg[7:4] <= #TCQ 4'd1;
    else if (ena == 1)
    begin
            if((mm_reg == 8'h59)&(ss_reg == 8'h59))
            begin
                    // if(ss_reg[7:4]==5 )     //end counter condition
                        // ss_reg[7:4] <= #TCQ 4'd0;
                    // else if (end_cnt_clk)
                    if ((hh_reg[7:4]==4'd1)&(hh_reg[3:0]==4'd2))
                        hh_reg[7:4] <= #TCQ 0;
                        
                    else if ((hh[3:0]==4'd9)&((hh_reg[7:4]<4'd1)))
                        hh_reg[7:4] <= #TCQ hh_reg[7:4] + 1'b1;
                    else
                        hh_reg[7:4] <=    hh_reg[7:4];
             end
             else
             begin
             end
             
    end
    else
    begin
    end      // keep the same 
end


assign hh =  hh_reg; 
assign pm =  pm_reg; 











// only counts when the seconds are full
// assign en_cnt_hh_low = en_cnt_hh_low_reg;

/*
always@(posedge clk)
begin
    if(reset)        
        cnt_hh_low <= #TCQ 4'd2;
    // else if(end_cnt_hh_low|end_cnt_hh_high)     //end counter condition
    else if(end_cnt_hh_low_condition1)
    begin
        cnt_hh_low <= #TCQ 4'd1;
        // cnt_hh_high <= #TCQ 4'd0;
    end
    else if(end_cnt_hh_low_condition2)
    begin
        cnt_hh_low <= #TCQ 4'd0;
        // cnt_hh_high <= #TCQ 4'd0;
    end        
    else if (en_cnt_hh_low & ena)
        cnt_hh_low <= #TCQ cnt_hh_low + 1'b1;

    else
        cnt_hh_low <= #TCQ cnt_hh_low;  // keep the same 
end
*/

//end count flag circuit
/*
always@(posedge clk)
begin
    if(reset)
    begin
            end_cnt_hh_low <= #TCQ 1'b0;
            end_cnt_hh_low_condition1 <= 0;
            end_cnt_hh_low_condition2 <= 0;
    end
    else if ((cnt_hh_high == 4'd0)&(cnt_hh_low == 4'd9)&(mm_reg == 8'h59)&(ss_reg == 8'h59))
    begin        
            end_cnt_hh_low_condition2 <= #TCQ 1'b1;
            // end_cnt_hh_low
            
    end
    else if ((cnt_hh_high == 4'd1)&(cnt_hh_low == 4'd2)&(mm_reg == 8'h59)&(ss_reg == 8'h59))
    begin        
            end_cnt_hh_low_condition1 <= #TCQ 1'b1;
            
    end
    		
    else
    begin
            end_cnt_hh_low_condition1 <= 0;
            end_cnt_hh_low_condition2 <= 0;
            end_cnt_hh_low <= #TCQ 1'b0;
     end
end
*/

// assign hh[3:0] =  cnt_hh_low;    
    
// assign en_cnt_hh_high =  end_cnt_hh_low;  

// the higher part of the minites 

/*
always@(posedge clk)
begin
    if(reset)        
        cnt_hh_high <= #TCQ 4'd1;
    //else if(end_cnt_hh_high)     //end counter condition
   // begin
        // cnt_hh_low <= #TCQ 4'd1;
        //cnt_hh_high <= #TCQ 4'd0;
    //end
    else if(end_cnt_hh_low_condition1)
    begin
        // 12 to 01
        cnt_hh_high <= #TCQ 4'd0;
        // cnt_hh_high <= #TCQ 4'd0;
    end
    else if(end_cnt_hh_low_condition2)
    begin
        // // 09 to 10
        cnt_hh_high <= #TCQ 4'd1;
        // cnt_hh_high <= #TCQ 4'd0;
    end
    
    
    else if (en_cnt_hh_high & ena)
        cnt_hh_high <= #TCQ cnt_hh_high + 1'b1;

    else
        cnt_hh_high <= #TCQ cnt_hh_high;  // keep the same 
end
*/


//end count flag circuit

/*
always@(posedge clk)
begin
    if(reset)
    begin
            end_cnt_hh_high <= #TCQ 1'b0;
            pm_reg <= 0;
    end
    else if ((cnt_hh_high == 4'd1)&(cnt_hh_low == 4'd2)&(cnt_mm_high == 4'd5)&(cnt_mm_low == 4'd10-1)& (cnt_tens == 4'd5)& (cnt_clk == 4'd9-1))   // reset when hours == 12
    //else if ((cnt_hh_high == 4'd1)&(cnt_hh_low == 4'd2))
    begin        
            
            
            end_cnt_hh_high <= #TCQ 1'b1;
            
            // pm_reg <= ~pm_reg;
                        
     end
    else if ((cnt_hh_high == 4'd1)&(cnt_hh_low == 4'd1)&(cnt_mm_high == 4'd5)&(cnt_mm_low == 4'd10-1)& (cnt_tens == 4'd5)& (cnt_clk == 4'd10-1))   // reset when hours == 12
    // else if ((cnt_hh_high == 4'd1)&(cnt_hh_low == 4'd1))   // reset w
    begin        
            
            
            // end_cnt_hh_high <= #TCQ 1'b1;
            // pm_reg <= #TCQ ~pm_reg;
            pm_reg = #TCQ ~pm_reg;
                        
     end
    // else if ((cnt_hh_high == 4'd1)&(cnt_hh_low == 4'd1)&(cnt_mm_high == 4'd5)&(cnt_mm_low == 4'd10-1)& (cnt_tens == 4'd5)& (cnt_clk == 4'd9-1))   // reset when hours == 12
            // end_cnt_hh_high <= #TCQ 1'b1;
    		
    else
    begin
            end_cnt_hh_high <= #TCQ 1'b0;
            // pm_reg <= pm_reg;
    end
end
*/

// assign hh[7:4] =  cnt_hh_high;

// assign pm = pm_reg;



endmodule
