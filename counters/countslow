module top_module (
    input clk,
    input slowena,
    input reset,
    output [3:0] q);
    
    
parameter TCQ = 1'b1;    
    
reg [3:0] cnt_clk;
wire en_cnt_clk;
reg end_cnt_clk;
reg full_cnt_clk;
    
    
reg [3:0] cnt_slow;
wire en_cnt_slow;
reg end_cnt_slow;
reg full_cnt_slow;

assign  en_cnt_clk = 1;
    
    
//count on each clock
always@(posedge clk)
begin
    if(reset)        
        cnt_clk <= #TCQ 4'b0;
    else if(end_cnt_clk)     //end counter condition
        cnt_clk <= #TCQ 4'b0;
    else if (en_cnt_clk)
        cnt_clk <= #TCQ cnt_clk + 1'b1;

    else
        cnt_clk <= #TCQ cnt_clk;  // keep the same 
end


//end count flag circuit
always@(posedge clk)
begin
    if(reset)
    begin
            end_cnt_clk <= #TCQ 1'b0;
    end
    else if (cnt_clk == 4'd3-1)
            end_cnt_clk <= #TCQ 1'b1;
    else
            end_cnt_clk <= #TCQ 1'b0;
end

//  assign q =  cnt_clk;
    
    
    
    //count on slow clock
always@(posedge clk)
begin
    if(reset)        
        cnt_slow <= #TCQ 4'b0;
    //else if(cnt_slow == 4'd10-1)     //end counter condition
    //    cnt_slow <= #TCQ 4'b0;
    else if (slowena & (cnt_slow < (4'd10-1)))  // enable the count
        cnt_slow <= #TCQ cnt_slow + 1'b1;
    else if (~slowena & cnt_slow == (4'd10-1))  // enable the count
        cnt_slow <= #TCQ (4'd10-1);
    else if (slowena & cnt_slow == (4'd10-1))  // enable the count
        cnt_slow <= #TCQ 0;
    else
        cnt_slow <= #TCQ cnt_slow; // keep the same  
end


//end count flag circuit
always@(posedge clk)
begin
    if(reset)
    begin
        end_cnt_slow <= #TCQ 1'b0;
    end
    else if (cnt_slow == 4'd10-1)
            end_cnt_slow <= #TCQ 1'b1;
    else
            end_cnt_slow <= #TCQ 1'b0;
end
    
    
    
    assign q = cnt_slow;
    
    

endmodule
