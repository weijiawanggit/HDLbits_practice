module top_module (
    input clk,
    input reset,
    input [31:0] in,
    output [31:0] out
);
    
    
    
    
    reg [31:0] tri_1; 
    reg [31:0] tri_2;
    
    reg [31:0] out_reg;
    
    wire [31:0] nedge;
    
    /*
    always@(posedge clk)
    begin
        tri_1 <=  in;
        tri_2 <=  tri_1;
    end
    */
    
    // assign pedge[0] = (~tri_2[0]) & tri_1[0];    // pos_edge detect
    

    generate
        genvar j;
        for(j = 0; j < 32; j=j+1) begin : assign_negde
            // assign nedge[j] = (tri_2[j]) & ~tri_1[j];    // pos_edge detect
            always @(posedge clk)
                begin
                    tri_1[j] <= in[j];
                    tri_2[j] <= tri_1[j];
                    
                    if(reset==1)
                        out_reg[j] <= 1'b0;
                    else if ((tri_1[j]) & ~in[j])
                        out_reg[j] <= 1'b1;
                    else
                        out_reg[j] <= out_reg[j];
                end  
         
         end
	endgenerate 
    
    
    /*
    generate
        genvar i;
        for(i = 0; i < 31; i=i+1) begin : regs
            always@(posedge clk)
                begin
                    if(reset==1)
                        out_reg[i]<=1'b0;
                    else if(nedge[i]==1)
                        out_reg[i] <= 1'b1;
                    else
                        out_reg[i] <= out_reg[i];
                end  
         
         end
    endgenerate 
    */

    assign out = out_reg;
    
    

endmodule
